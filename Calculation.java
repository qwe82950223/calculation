/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calculation;

import java.util.Stack;

/**
 *
 * @author xiao lin
 */
public class Compute extends javax.swing.JFrame {

    /**
     * Creates new form compute
     */
    public Compute() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        input = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        computeResult = new javax.swing.JTextField();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        input.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("compute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        computeResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        computeResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(input, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(computeResult, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(computeResult, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
       
    }                                     

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        String reader = input.getText();
        Stack parenthesesFilter = new Stack();//the stack to put the operation without parentheses
        Stack compute = new Stack();// the stack to compute the operation in the parentheses
        for(int i = 0; i<reader.length(); i++){
            if(reader.charAt(i) == ')'){ //check is there parentheses
                while(!String.valueOf(parenthesesFilter.peek()).equals("(")){ // push all operation in the parenthese into compute stack
                    compute.push(parenthesesFilter.pop());
                }
                parenthesesFilter.pop();// pop the ")" from parenttheseFilter stack
                float r = computeStack(compute);//compute the operation between ( )
                for(int j = 0; j<String.valueOf(r).length();j++){
                    parenthesesFilter.push(String.valueOf(r).charAt(j)); //push the result into parentheseFilter
                }
                
            }else{
                parenthesesFilter.push(reader.charAt(i)); //push the operation into parentheseFilter
            }
            
        }
        Stack fin = new Stack();// the stack use to reverse the operation from parentheseFilter
        while(!parenthesesFilter.empty()){
            fin.push(parenthesesFilter.pop());//reverse operation 
        }
        float f = computeStack(fin); //compute final result from fin
        computeResult.setText(String.valueOf(f));
    }                                        

    private void computeResultActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             
    

    private float computeStack(Stack x){
        String number1 = ""; //string to store first number of operation
        String number2; //string to store second number of operation
        String op; //operation
        while(!isOperator(String.valueOf(x.peek()))){//get first number
            number1 += x.pop();
        }
        while(!x.empty()){//get second number when there is more number 
            op = String.valueOf(x.pop()); // get the operation first
            number2 = ""; 
            while(!x.empty() && !isOperator(String.valueOf(x.peek()))){
                number2 += x.pop();//get second number
            }
            
            number1 = String.valueOf(compute(Float.parseFloat(number1), Float.parseFloat(number2), op));
            //set the first number to the result of first operation
        }
        
        return Float.parseFloat(number1); //return the result of operation
    }
    
    private float compute(float number1, float number2, String op ){
        float result = 0;
        if(op.equals("+")){
                result = number1 + number2;
        }
        if(op.equals("-")){
                result = number1 - number2;
        }
        if(op.equals("*")){
                result = number1 * number2;
        }
        if(op.equals("/")){
                result = number1 / number2;
        }
        return result;
    }
    
        
    private boolean isOperator(String i){
        if(i.equals("+") || i.equals("-") || i.equals("*") || i.equals("/")){
            return true;
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compute.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compute().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField computeResult;
    private javax.swing.JTextField input;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}
